{"version":3,"sources":["subviews/RouteSelect.jsx","subviews/MapView.jsx","MainView.jsx","App.js","serviceWorker.js","index.js"],"names":["RouteSelect","props","state","busroute","buses","selectedRoute","onClick","bind","this","length","fetch","then","res","json","formatBuses","event","preventDefault","selectRoute","target","outerText","classList","remove","add","setState","busRoutes","_","sortBy","uniqBy","bus","parseInt","route","fetchBuses","className","value","tabindex","map","busRoute","key","toString","String","React","Component","MapView","onMarkerClick","marker","e","selectedBus","activeMarker","showingInfoWindow","onMapClicked","google","zoom","style","height","initialCenter","lat","lng","position","lon","name","busInfoString","visible","GoogleApiWrapper","apiKey","styles","width","MainView","allBuses","selectedBuses","unfilteredBusData","filteredBusData","unfilteredBusDatum","timepoint","busNumber","filter","hAlignContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e7b01a7.chunk.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport \"./RouteSelect.css\";\n\nclass RouteSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { busroute: \"\", buses: props.buses, selectedRoute: null };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  fetchBuses() {\n    if (!this.state.buses.length) {\n      fetch(\n        \"http://developer.itsmarta.com/BRDRestService/RestBusRealTimeService/GetAllBus\"\n      )\n        .then(res => res.json())\n        .then(json => this.props.formatBuses(json));\n    }\n  }\n\n  onClick(event) {\n    event.preventDefault();\n    this.props.selectRoute(event.target.outerText);\n    if (this.state.selectedRoute) {\n      this.state.selectedRoute.classList.remove(\"selectedRoute\");\n    }\n    event.target.classList.add(\"selectedRoute\");\n    this.setState({ selectedRoute: event.target });\n  }\n\n  render() {\n    let busRoutes = [];\n    if (this.props.buses.length) {\n      busRoutes = _.sortBy(_.uniqBy(this.props.buses, \"route\"), bus => {\n        return parseInt(bus.route, 10);\n      });\n    } else {\n      this.fetchBuses();\n    }\n    return (\n      <div className=\"listView\">\n        <h3 className=\"listHeader\">Select Route</h3>\n        <div className=\"scrollView\">\n          <ul\n            value={\"all\"}\n            onClick={this.onClick}\n            className=\"busRoute\"\n            tabindex=\"1\"\n          >\n            All\n          </ul>\n          {busRoutes.map(busRoute => (\n            <ul\n              key={busRoute.route.toString()}\n              onClick={this.onClick}\n              className=\"busRoute\"\n              tabindex=\"1\"\n            >\n              {String(busRoute.route)}\n            </ul>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RouteSelect;\n","import React from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nexport class MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedBus: null,\n      activeMarker: null,\n      showingInfoWindow: false\n    };\n\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onMapClicked = this.onMapClicked.bind(this);\n  }\n\n  busInfoString(bus) {\n    return (\n      \"Bus number \" +\n      bus[\"busNumber\"] +\n      \" is currently at or approaching \" +\n      bus[\"timepoint\"]\n    );\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedBus: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n\n  onMapClicked = () => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={10}\n        style={{\n          height: \"100vh\"\n        }}\n        initialCenter={{ lat: 33.749, lng: -84.388 }}\n        onClick={this.onMapClicked}\n      >\n        {this.props.buses.map(bus => (\n          <Marker\n            position={{ lat: bus.lat, lng: bus.lon }}\n            name={this.busInfoString(bus)}\n            onClick={this.onMarkerClick}\n          />\n        ))}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n        >\n          <div>\n            <h4>{this.state.selectedBus ? this.state.selectedBus.name : \"\"}</h4>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyB_Z9lTIAzbW2VBkebVJWWjGgTvJZLQk8o\"\n})(MapView);\n","import React from \"react\";\nimport RouteSelect from \"./subviews/RouteSelect\";\nimport MapView from \"./subviews/MapView\";\nimport fetch from \"node-fetch\";\nimport FlexView from \"react-flexview\";\n\nconst styles = {\n  width: \"400px\",\n  height: \"400px\"\n};\n\nclass MainView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { allBuses: [], selectedBuses: [] };\n\n    this.selectRoute = this.selectRoute.bind(this);\n    this.formatBuses = this.formatBuses.bind(this);\n  }\n\n  formatBuses(unfilteredBusData) {\n    const filteredBusData = unfilteredBusData.map(unfilteredBusDatum => {\n      return {\n        route: unfilteredBusDatum[\"ROUTE\"],\n        lat: unfilteredBusDatum[\"LATITUDE\"],\n        lon: unfilteredBusDatum[\"LONGITUDE\"],\n        timepoint: unfilteredBusDatum[\"TIMEPOINT\"],\n        busNumber: unfilteredBusDatum[\"VEHICLE\"]\n      };\n    });\n    this.setState({\n      allBuses: filteredBusData,\n      selectedBuses: filteredBusData\n    });\n  }\n\n  selectRoute(route) {\n    if (route === \"All\") {\n      this.setState({ selectedBuses: this.state.allBuses });\n    } else {\n      const buses = this.state.allBuses.filter(bus => bus.route === route);\n      this.setState({ selectedBuses: buses });\n    }\n  }\n\n  render() {\n    return (\n      <div style={styles}>\n        <FlexView hAlignContent=\"left\">\n          <RouteSelect\n            selectRoute={this.selectRoute}\n            formatBuses={this.formatBuses}\n            buses={this.state.allBuses}\n          />\n          <div>\n            <MapView buses={this.state.selectedBuses} />\n          </div>\n        </FlexView>\n      </div>\n    );\n  }\n}\n\nexport default MainView;\n","import React from \"react\";\nimport MainView from \"./MainView\";\n\nfunction App() {\n  return <MainView />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}