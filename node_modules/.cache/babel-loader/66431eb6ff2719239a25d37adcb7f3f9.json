{"ast":null,"code":"var _jsxFileName = \"/Users/tjmercer/Desktop/pandora/src/subviews/MapView.jsx\";\nimport React from \"react\";\nimport { Map, GoogleApiWrapper, Marker } from \"google-maps-react\";\nimport fetch from \"node-fetch\";\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      busroute: props.busroute,\n      buses: []\n    };\n  }\n\n  fetchBuses() {\n    fetch(\"http://developer.itsmarta.com/BRDRestService/RestBusRealTimeService/GetBusByRoute/\" + this.state.busroute).then(res => res.json()).then(json => this.formatData(json));\n  }\n\n  formatData(data) {\n    const formatedData = data.map(datum => {\n      return {\n        route: datum[\"ROUTE\"],\n        lat: datum[\"LATITUDE\"],\n        lon: datum[\"LONGITUDE\"],\n        timepoint: datum[\"TIMEPOINT\"]\n      };\n    });\n    this.setState({\n      buses: formatedData\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.props.busroute && this.state.buses[0] && this.state.busroute !== this.state.buses[0].route) {\n      this.fetchBuses();\n    }\n  }\n\n  busPositions(lat, lon) {\n    return React.createElement(Marker, {\n      position: {\n        lat: lat,\n        lng: lon\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      zoom: 8,\n      style: mapStyles,\n      initialCenter: {\n        lat: 33.749,\n        lng: -84.388\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.buses ? this.state.buses.forEach(bus => this.busPositions(bus.lat, bus.lon)) : null);\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyB_Z9lTIAzbW2VBkebVJWWjGgTvJZLQk8o\"\n})(MapView);","map":{"version":3,"sources":["/Users/tjmercer/Desktop/pandora/src/subviews/MapView.jsx"],"names":["React","Map","GoogleApiWrapper","Marker","fetch","mapStyles","width","height","MapView","Component","constructor","props","state","busroute","buses","fetchBuses","then","res","json","formatData","data","formatedData","map","datum","route","lat","lon","timepoint","setState","componentDidUpdate","busPositions","lng","render","google","forEach","bus","apiKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,gBAAd,EAAgCC,MAAhC,QAA8C,mBAA9C;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,MADS;AAEhBC,EAAAA,MAAM,EAAE;AAFQ,CAAlB;;AAKA,MAAMC,OAAN,SAAsBR,KAAK,CAACS,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAEF,KAAK,CAACE,QAAlB;AAA4BC,MAAAA,KAAK,EAAE;AAAnC,KAAb;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACXX,IAAAA,KAAK,CACH,uFACE,KAAKQ,KAAL,CAAWC,QAFV,CAAL,CAIGG,IAJH,CAIQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJf,EAKGF,IALH,CAKQE,IAAI,IAAI,KAAKC,UAAL,CAAgBD,IAAhB,CALhB;AAMD;;AAEDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,UAAMC,YAAY,GAAGD,IAAI,CAACE,GAAL,CAASC,KAAK,IAAI;AACrC,aAAO;AACLC,QAAAA,KAAK,EAAED,KAAK,CAAC,OAAD,CADP;AAELE,QAAAA,GAAG,EAAEF,KAAK,CAAC,UAAD,CAFL;AAGLG,QAAAA,GAAG,EAAEH,KAAK,CAAC,WAAD,CAHL;AAILI,QAAAA,SAAS,EAAEJ,KAAK,CAAC,WAAD;AAJX,OAAP;AAMD,KAPoB,CAArB;AAQA,SAAKK,QAAL,CAAc;AAAEd,MAAAA,KAAK,EAAEO;AAAT,KAAd;AACD;;AAEDQ,EAAAA,kBAAkB,GAAG;AACnB,QACE,KAAKlB,KAAL,CAAWE,QAAX,IACA,KAAKD,KAAL,CAAWE,KAAX,CAAiB,CAAjB,CADA,IAEA,KAAKF,KAAL,CAAWC,QAAX,KAAwB,KAAKD,KAAL,CAAWE,KAAX,CAAiB,CAAjB,EAAoBU,KAH9C,EAIE;AACA,WAAKT,UAAL;AACD;AACF;;AAEDe,EAAAA,YAAY,CAACL,GAAD,EAAMC,GAAN,EAAW;AACrB,WAAO,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAEA,GAAP;AAAYM,QAAAA,GAAG,EAAEL;AAAjB,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,GAAD;AACE,MAAA,MAAM,EAAE,KAAKrB,KAAL,CAAWsB,MADrB;AAEE,MAAA,IAAI,EAAE,CAFR;AAGE,MAAA,KAAK,EAAE5B,SAHT;AAIE,MAAA,aAAa,EAAE;AAAEoB,QAAAA,GAAG,EAAE,MAAP;AAAeM,QAAAA,GAAG,EAAE,CAAC;AAArB,OAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKnB,KAAL,CAAWE,KAAX,GACG,KAAKF,KAAL,CAAWE,KAAX,CAAiBoB,OAAjB,CAAyBC,GAAG,IAAI,KAAKL,YAAL,CAAkBK,GAAG,CAACV,GAAtB,EAA2BU,GAAG,CAACT,GAA/B,CAAhC,CADH,GAEG,IARN,CADF;AAYD;;AAtDmC;;AAyDtC,eAAexB,gBAAgB,CAAC;AAC9BkC,EAAAA,MAAM,EAAE;AADsB,CAAD,CAAhB,CAEZ5B,OAFY,CAAf","sourcesContent":["import React from \"react\";\nimport { Map, GoogleApiWrapper, Marker } from \"google-maps-react\";\nimport fetch from \"node-fetch\";\n\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { busroute: props.busroute, buses: [] };\n  }\n\n  fetchBuses() {\n    fetch(\n      \"http://developer.itsmarta.com/BRDRestService/RestBusRealTimeService/GetBusByRoute/\" +\n        this.state.busroute\n    )\n      .then(res => res.json())\n      .then(json => this.formatData(json));\n  }\n\n  formatData(data) {\n    const formatedData = data.map(datum => {\n      return {\n        route: datum[\"ROUTE\"],\n        lat: datum[\"LATITUDE\"],\n        lon: datum[\"LONGITUDE\"],\n        timepoint: datum[\"TIMEPOINT\"]\n      };\n    });\n    this.setState({ buses: formatedData });\n  }\n\n  componentDidUpdate() {\n    if (\n      this.props.busroute &&\n      this.state.buses[0] &&\n      this.state.busroute !== this.state.buses[0].route\n    ) {\n      this.fetchBuses();\n    }\n  }\n\n  busPositions(lat, lon) {\n    return <Marker position={{ lat: lat, lng: lon }} />;\n  }\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={8}\n        style={mapStyles}\n        initialCenter={{ lat: 33.749, lng: -84.388 }}\n      >\n        {this.state.buses\n          ? this.state.buses.forEach(bus => this.busPositions(bus.lat, bus.lon))\n          : null}\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyB_Z9lTIAzbW2VBkebVJWWjGgTvJZLQk8o\"\n})(MapView);\n"]},"metadata":{},"sourceType":"module"}